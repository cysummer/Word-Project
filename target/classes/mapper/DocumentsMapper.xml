<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.DocumentsMapper">
  <resultMap id="BaseResultMap" type="model.Documents">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="author" jdbcType="VARCHAR" property="author" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="url" jdbcType="VARCHAR" property="url" />
    <result column="user_id" jdbcType="CHAR" property="userId" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="download_num" jdbcType="INTEGER" property="downloadNum" />
    <result column="read_num" jdbcType="INTEGER" property="readNum" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>

  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="model.Documents">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>

  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, title, author, status, url, user_id, username, download_num, read_num, create_time,content
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="model.DocumentsExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_document
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="model.DocumentsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from t_document
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_document
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_document
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="model.Documents">
    insert into t_document (id, title, author, 
      status, url, user_id, username, 
      download_num, read_num, create_time, 
      content)
    values (#{id,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, #{author,jdbcType=VARCHAR}, 
      #{status,jdbcType=INTEGER}, #{url,jdbcType=VARCHAR}, #{userId,jdbcType=CHAR}, #{username,jdbcType=VARCHAR}, 
      #{downloadNum,jdbcType=INTEGER}, #{readNum,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="model.Documents">
    insert into t_document
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="author != null">
        author,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="url != null">
        url,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="downloadNum != null">
        download_num,
      </if>
      <if test="readNum != null">
        read_num,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="author != null">
        #{author,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="url != null">
        #{url,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=CHAR},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="downloadNum != null">
        #{downloadNum,jdbcType=INTEGER},
      </if>
      <if test="readNum != null">
        #{readNum,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="model.Documents">
    update t_document
    <set>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="author != null">
        author = #{author,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="url != null">
        url = #{url,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=CHAR},
      </if>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="downloadNum != null">
        download_num = #{downloadNum,jdbcType=INTEGER},
      </if>
      <if test="readNum != null">
        read_num = #{readNum,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="model.Documents">
    update t_document
    set title = #{title,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      url = #{url,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=CHAR},
      username = #{username,jdbcType=VARCHAR},
      download_num = #{downloadNum,jdbcType=INTEGER},
      read_num = #{readNum,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="model.Documents">
    update t_document
    set title = #{title,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      url = #{url,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=CHAR},
      username = #{username,jdbcType=VARCHAR},
      download_num = #{downloadNum,jdbcType=INTEGER},
      read_num = #{readNum,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!-- 分页查询 -->
  <select id="selectByList" resultMap="BaseResultMap" parameterType="domain.request.DocumentQueryParam">
    <include refid="pagnationBegin" />
    SELECT <include refid="Base_Column_List" />
    FROM t_document
    <where>
      <if test="startTime != null">
        AND create_time >= #{startTime}
      </if>

      <if test="endTime != null">
        AND create_time &lt;= #{endTime}
      </if>

      <if test="status != null">
        AND status = #{status}
      </if>

      <if test="userId != null">
        AND user_id = #{userId}
      </if>

      <if test="username != null">
        <![CDATA[
          AND username LIKE CONCAT('%', #{username}, '%')
        ]]>
      </if>
    </where>
    ORDER BY id
    <include refid="pagnationEnd" />
  </select>


  <!--分页查询开始和结束标志-->
  <sql id="pagnationBegin">
  </sql>

  <sql id="pagnationEnd">
    <![CDATA[LIMIT #{offset}, #{limit}]]>
  </sql>

  <!-- 统计条数 -->
  <select id="countByPage" parameterType="domain.request.DocumentQueryParam" resultType="int">
    SELECT count(id)
    FROM t_document
    <where>
      <if test="startTime != null">
        AND create_time >= #{startTime}
      </if>

      <if test="endTime != null">
        AND create_time &lt;= #{endTime}
      </if>

      <if test="userId != null">
        AND user_id = #{userId}
      </if>

      <if test="status != null">
        AND status = #{status}
      </if>

      <if test="username != null">
        <![CDATA[
                AND username LIKE CONCAT('%', #{username}, '%')
        ]]>
      </if>

    </where>
  </select>

</mapper>